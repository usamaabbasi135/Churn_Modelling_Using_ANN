# -*- coding: utf-8 -*-
"""ANN Implementation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LM8BocyLEN-EOFWK3yOgX4K6TPB6wTdD
"""

!pip install tensorflow

import tensorflow as tf
print(tf.__version__)

"""Importing Basic Libraries"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('/content/drive/MyDrive/Dataset/Churn_Modelling.csv')
dataset.head()

"""Dividing the dataset into Dependent and Independent features"""

X = dataset.iloc[:,3:13]
y = dataset.iloc[:,13]

X.head()

y

"""# Feature Engineering"""

geography = pd.get_dummies(X['Geography'],dtype=int,drop_first=True)
gender = pd.get_dummies(X['Gender'],dtype=int,drop_first=True)

geography

gender

X=X.drop(['Geography','Gender'],axis=1)

X.head()
X.tail()

X=pd.concat([X,geography,gender],axis=1)

X.head()

X.tail()

"""Spliting the dataset into Training and Test Set"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state=0)

y_test

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

X_test

"""ANN Creation"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LeakyReLU,PReLU,ELU,ReLU
from tensorflow.keras.layers import Dropout

"""Initializing ANN"""

classifier = Sequential()

"""Adding Input Layer"""

classifier.add(Dense(units=11,activation='relu'))

"""Adding the first Hidden Layer"""

classifier.add(Dense(units=7,activation='relu'))

classifier.add(Dense(units=6,activation='relu'))

"""Adding the output layer"""

classifier.add(Dense(units=1,activation='sigmoid'))

classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

"""Early Stopping"""

import tensorflow as tf
early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0.0001,
    patience=20,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
    start_from_epoch=0,
)

model_history = classifier.fit(X_train,y_train,validation_split=0.33,batch_size=10,epochs=1000,callbacks=early_stopping)

model_history.history.keys()

"""History Accuracy Graph"""

plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])
plt.title('model_accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()

plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()

"""Predictions"""

y_pred = classifier.predict(X_test)
y_pred = (y_pred >=0.5)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_pred)
cm

from sklearn.metrics import accuracy_score
score = accuracy_score(y_pred,y_test)

score

"""Getting the weights"""

classifier.get_weights()

